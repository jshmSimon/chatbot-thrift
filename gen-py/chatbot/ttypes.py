#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class Err(object):
    """
    Attributes:
     - errno
     - errmsg
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'errno', None, None, ),  # 1
        (2, TType.STRING, 'errmsg', 'UTF8', None, ),  # 2
    )

    def __init__(self, errno=None, errmsg=None,):
        self.errno = errno
        self.errmsg = errmsg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errno = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.errmsg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Err')
        if self.errno is not None:
            oprot.writeFieldBegin('errno', TType.I32, 1)
            oprot.writeI32(self.errno)
            oprot.writeFieldEnd()
        if self.errmsg is not None:
            oprot.writeFieldBegin('errmsg', TType.STRING, 2)
            oprot.writeString(self.errmsg.encode('utf-8') if sys.version_info[0] == 2 else self.errmsg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UtterenceResult(object):
    """
    Attributes:
     - err
     - response_content
     - state_matrix
     - candidate
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'err', (Err, Err.thrift_spec), None, ),  # 1
        (2, TType.STRING, 'response_content', 'UTF8', None, ),  # 2
        (3, TType.LIST, 'state_matrix', (TType.DOUBLE, None, False), None, ),  # 3
        (4, TType.LIST, 'candidate', (TType.STRING, 'UTF8', False), None, ),  # 4
    )

    def __init__(self, err=None, response_content=None, state_matrix=None, candidate=None,):
        self.err = err
        self.response_content = response_content
        self.state_matrix = state_matrix
        self.candidate = candidate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.err = Err()
                    self.err.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.response_content = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.state_matrix = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readDouble()
                        self.state_matrix.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.candidate = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.candidate.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('UtterenceResult')
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRUCT, 1)
            self.err.write(oprot)
            oprot.writeFieldEnd()
        if self.response_content is not None:
            oprot.writeFieldBegin('response_content', TType.STRING, 2)
            oprot.writeString(self.response_content.encode('utf-8') if sys.version_info[0] == 2 else self.response_content)
            oprot.writeFieldEnd()
        if self.state_matrix is not None:
            oprot.writeFieldBegin('state_matrix', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.state_matrix))
            for iter12 in self.state_matrix:
                oprot.writeDouble(iter12)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.candidate is not None:
            oprot.writeFieldBegin('candidate', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.candidate))
            for iter13 in self.candidate:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
